[
  {
    "path": "posts/2021-01-25-dataviz-makeover-1/",
    "title": "DataViz Makeover 1",
    "description": "Due 28 Jan 2021, 2359h.",
    "author": [
      {
        "name": "Cheryl Pay",
        "url": {}
      }
    ],
    "date": "2021-01-28",
    "categories": [],
    "contents": "\nA. Critic\nA critic of the following data visualization is provided.\nExcerpt and chart is taken from Page 22 of Report: Labour Force in Singapore 2019Clarity\nC1. Trends in the first four sentences of the statement are not apparent in the visualization. In particular, the age groups “aged 55 and above” and “aged 25 to 54” are not clearly shown in the visualization.\nC2. The years in between 2009 and 2019 are missed out; only 2009 and 2019 are shown.\nC3. Y-axis is missing from the visualization.\nC4. No lead in or callouts to provide context.\nC5.Title and caption of visualization is misleading; “Per Cent” is inaccurate.\nC6. LFPR is used in the statement, without stating what LFPR stands for.\nAesthetics\nA1. Poor color choice of gray and blue used.\nA2. Y-axis labels are cramped.\nA3. Poor positioning of “Source” and “Note”, with less than one line space between them and no spacing below “Note”.\nIn this hands-on exercise, you will learn how to plot data visualisation for visualising correlation matrix with R. It consists of three main sections. First, you will learn how to create correlation matrix using pairs() of R Graphics. Next, you will learn how to plot corrgram using corrplot package of R Lastly, you will learn how to create an interactive correlation matrix using plotly R. .\nB. Alternative Graphical Representation - Sketch\nWith reference to [(A) Critic], an alternative representation is sketched below.\ninsert sketch here\nChart Title, Proportion of labour force by age group, by year, is added. (C5)\nAn area chart is selected to show the percentage of each age group, every year from 2009 to 2019 (instead of showing only 2009 and 2019). (C4)\nData is grouped according to three age groups. This grouping serves to reflect the increase in percentage points of residents aged 55 and over in the labour force over the years. (C1)\n55+ years\n25 to 54 years\nBelow 25 years\n\nThe legend, in a single line, is shown clearly below the chart title. (C1, C2)\nColour palette, Tableau 10, is chosen to differentiate the three age groups clearly; instead of grey-blue colour for 2009 and 2019 respectively. (A1)\nY-axis with minimum 0% and maximum 100% is shown. (C3)\nX-axis labels are comfortably spaced i.e. not cramped. (A2)\nSource is positioned two line spaces below x-axis; Source is also aligned right and italicized for differentiation from x-axis labels. (A3)\nCallouts for percentage in 2009 and 2019, for all three age groups, are added to emphasis the trend as described in the statement. Font is bold. (C1, C4)\nLabour force participating rate is stated in the statement to reflect what LFPR stands for. (C6)\nNext, you will use the code chunk below to install and launch corrplot, ggpubr, plotly and tidyverse in RStudio.\n\n\npackages = c('ggpubr', 'tidyverse')\n\nfor(p in packages){library\n  if(!require(p, character.only = T)){\n    install.packages(p)\n  }\n  library(p, character.only = T)\n}\n\n\n\nC. Proposed Data Visualization - Tableau\n\nD. Step-by-Step Guide for Creating the Visualization\nD.1 Preparing the data: excel file\nFirst, we download Table (7): Resident Labour Force Aged Fifteen Years and Over by Age and sex, 2009 – 2019 (June) from Table: Labour Force 2019.\nThen, we need to calculate proportion of resident labour force of each age group, by year, in percent.\n\n\nProportion = number of residents in each age group each year divided by the total number of residents in the same year\n\n\n\nDo the same for every year and every age group.\nCopy and paste the values calculated onto another excel file. Save file as data.xlsx to use as your data source for Tableau. You should have the following three columns with 133 observations.\n\n\nColumn A: Year\nColumn B: Age (Years)\nColumn C: Percentage\n\n\n\nD.2 Creating the visualization on Tableau\nLoad Tableau and click on Microsoft Excel from the taskbar on the left. Select the file: data.xlsx that you have created previously. Click Open.\nClick on Abc of Year. From the dropdown, select Date.\n\n\nFirst, let us import the data into R by using read_csv() of readr package.\nNotice that beside quality and type, the rest of the variables are numerical and continuous data type.\nE. Three Major Observations\nIn the figure below, multiple histograms are plotted to reveal the distribution of the selected variables in the wine quality data sets.\nThe code chunks used to create the data visualisation consists of two main parts. First, we will create the individual histograms using the code chunk below.\nNext, the ggarrange function of ggpur package is used to group these histograms together.\n\n\n\n",
    "preview": "posts/2021-01-25-dataviz-makeover-1/images/00.jpg",
    "last_modified": "2021-01-25T17:27:53+08:00",
    "input_file": "dataviz-makeover-1.utf8.md"
  },
  {
    "path": "posts/2021-01-05-my-first-post/",
    "title": "Hands-on_Distill.Rmd from Prof Kam",
    "description": "Example .Rmd file provided by Prof Kam for ISSS608 Visual Analytics",
    "author": [
      {
        "name": "Prof Kam Tim Seong",
        "url": {}
      }
    ],
    "date": "2021-01-04",
    "categories": [],
    "contents": "\n1.0 Overview\nCorrelation coefficient is a popular statistic that use to measure the type and strength of the relationship between two variables. The values of a correlation coefficient ranges between -1.0 and 1.0. A correlation coefficient of 1 shows a perfect linear relationship between the two variables, while a -1.0 shows a perfect inverse relationship between the two variables. A correlation coeficient of 0.0 shows no linear relationship between the two variables.\nWhen multivariate data are used, the correlation coeficeints of the pair comparisons are displayed in a table form known as correlation matrix or scatterplot matrix.\nThere are three broad reasons for computing a correlation matrix.\nTo reveal the relationship between highdimensional variables pairwisely.\nTo input into other analyses. For example, people commonly use correlation matrixes as inputs for exploratory factor analysis, confirmatory factor analysis, structural equation models, and linear regression when excluding missing values pairwise.\nAs a diagnostic when checking other analyses. For example, with linear regression a high amount of correlations suggests that the linear regression’s estimates will be unreliable.\nWhen the data is large, both in terms of the number of observations and the number of variables, Corrgram tend to be used to visually explore and analyse the structure and the patterns of relations among variables. It is designed based on two main schemes:\nRendering the value of a correlation to depict its sign and magnitude, and\nReordering the variables in a correlation matrix so that “similar” variables are positioned adjacently, facilitating perception.\nIn this hands-on exercise, you will learn how to plot data visualisation for visualising correlation matrix with R. It consists of three main sections. First, you will learn how to create correlation matrix using pairs() of R Graphics. Next, you will learn how to plot corrgram using corrplot package of R Lastly, you will learn how to create an interactive correlation matrix using plotly R. .\n2.0 Installing and Launching R Packages\nBefore you get started, you are required:\nto start a new R project, and\nto create a new R Markdown document.\nNext, you will use the code chunk below to install and launch corrplot, ggpubr, plotly and tidyverse in RStudio.\n\n\npackages = c('ggpubr', 'tidyverse')\n\nfor(p in packages){library\n  if(!require(p, character.only = T)){\n    install.packages(p)\n  }\n  library(p, character.only = T)\n}\n\n\n\n3.0 Importing and Preparing The Data Set\nIn this hands-on exercise, the Wine Quality Data Set of UCI Machine Learning Repository will be used. The data set consists of 13 variables and 6497 observations. For the purpose of this exercise, we have combined the red wine and white wine data into one data file. It is called wine_quality and is in csv file format.\n3.1 Importing Data\nFirst, let us import the data into R by using read_csv() of readr package.\n\n\nwine <- read_csv(\"data/wine_quality.csv\")\n\n\n\nNotice that beside quality and type, the rest of the variables are numerical and continuous data type.\n4.0 Univariate EDA with Histogram\nIn the figure below, multiple histograms are plottted to reveal the distribution of the selected variables in the wine quality data sets.\n\n\n\nThe code chunks used to create the data visualisation consists of two main parts. First, we will create the individual histograms using the code chunk below.\n\n\nfa <- ggplot(data=wine, aes(x= `fixed acidity`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\nva <- ggplot(data=wine, aes(x= `volatile acidity`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\nca <- ggplot(data=wine, aes(x= `citric acid`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\nrs <- ggplot(data=wine, aes(x= `residual sugar`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\nch <- ggplot(data=wine, aes(x= `chlorides`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\nfSO2 <- ggplot(data=wine, aes(x= `free sulfur dioxide`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\ntSO2 <- ggplot(data=wine, aes(x= `total sulfur dioxide`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\ndensity <- ggplot(data=wine, aes(x= density)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\npH <- ggplot(data=wine, aes(x= pH)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\nsulphates <- ggplot(data=wine, aes(x= sulphates)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\nalcohol <- ggplot(data=wine, aes(x= alcohol)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\n\n\nNext, the ggarrange function of ggpur package is used to group these histograms together.\n\n\nggarrange(fa, va, ca, rs, ch, fSO2, tSO2, density, pH, sulphates, alcohol, \n          ncol = 4, nrow = 3)\n\n\n\n\n\n\n",
    "preview": "posts/2021-01-05-my-first-post/my-first-post_files/figure-html5/unnamed-chunk-3-1.png",
    "last_modified": "2021-01-25T11:52:20+08:00",
    "input_file": "my-first-post.utf8.md"
  },
  {
    "path": "posts/welcome/",
    "title": "Welcome to IDEA",
    "description": "Welcome to our new blog, IDEA. We hope you enjoy \nreading what we have to say!",
    "author": [
      {
        "name": "Cheryl Pay",
        "url": "https://linkedin.com/in/cherylpay"
      }
    ],
    "date": "2021-01-04",
    "categories": [],
    "contents": "\n\n\n\n",
    "preview": {},
    "last_modified": "2021-01-05T17:43:52+08:00",
    "input_file": "welcome.utf8.md"
  }
]
